# -*- coding: utf-8 -*-
"""Fuel Consumpstion Predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CcuT608dUaY3uzrHntbBF6DihhGH3w5N
"""

'''The machine learning model in this code is designed for the automotive field, specifically for predicting the fuel efficiency (miles per gallon, MPG) of vehicles.
Here's how it fits into the automotive field:

1. **Predicting Fuel Efficiency**: The model uses features like displacement, horsepower, weight, and acceleration of vehicles
to predict their fuel efficiency (MPG). This prediction can be valuable for various stakeholders in the automotive industry, including manufacturers,
researchers, policymakers, and consumers.

2. **Improving Vehicle Design**: By understanding how different factors affect fuel efficiency, manufacturers can
optimize vehicle design to produce more fuel-efficient cars. For example, they can adjust engine specifications, reduce vehicle weight, or
enhance aerodynamics to improve MPG.

3. **Consumer Guidance**: Consumers can use MPG predictions to make informed decisions when purchasing vehicles. Higher
 MPG often translates to lower fuel costs and reduced environmental impact, making it an important consideration for many car buyers.

4. **Policy Development**: Policymakers can use insights from MPG predictions to develop regulations and
incentives aimed at promoting the production and adoption of fuel-efficient vehicles. This can contribute to reducing greenhouse gas emissions and
 mitigating the environmental impact of transportation.

Overall, this ML model serves as a tool to understand and optimize fuel efficiency in the automotive industry, addressing both economic and environmental concerns.'''

import pandas as pd
import numpy as np
import seaborn as sns
import joblib
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

df = pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/MPG.csv')

# Data Preprocessing
df = df.dropna()

y = df['mpg']
X = df[['displacement', 'horsepower', 'weight', 'acceleration']]

ss = StandardScaler()
X = ss.fit_transform(X)

# Splitting the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=2529)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)

# Evaluation Metrics for Linear Regression
print("Linear Regression Metrics:")
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MAPE:", mean_absolute_percentage_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

# Polynomial Regression
poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

lr_poly = LinearRegression()
lr_poly.fit(X_train_poly, y_train)
y_pred_poly = lr_poly.predict(X_test_poly)

# Evaluation Metrics for Polynomial Regression
print("\nPolynomial Regression Metrics:")
print("MAE:", mean_absolute_error(y_test, y_pred_poly))
print("MAPE:", mean_absolute_percentage_error(y_test, y_pred_poly))
print("R2 Score:", r2_score(y_test, y_pred_poly))

# Saving the model and scaler
joblib.dump(lr_poly, 'mpg_model.joblib')
joblib.dump(ss, 'scaler.joblib')
joblib.dump(poly, 'poly_transform.joblib')  # Save polynomial feature transformation

# Loading the model and scaler
model = joblib.load('mpg_model.joblib')
scaler = joblib.load('scaler.joblib')
poly = joblib.load('poly_transform.joblib')  # Load polynomial feature transformation

# Predicting for new data
new_person_data = np.array([297.0,140.0,3130,14.6]).reshape(1, -1)

# Scale the input data
new_person_data_scaled = scaler.transform(new_person_data)

# Apply polynomial feature transformation
new_person_data_poly = poly.transform(new_person_data_scaled)

# Make predictions using the loaded model
predicted_class = model.predict(new_person_data_poly)

print("\nPredicted MPG for the new data:", predicted_class[0])